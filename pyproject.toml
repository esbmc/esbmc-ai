[project]
name = "esbmc_ai"
description = "LLM driven development and automatic repair kit."
readme = "README.md"
requires-python = ">=3.12"
license-files = ["LICENSE"]
authors = [{ name = "Yiannis Charalambous", email = "yiannis128@hotmail.com" }]
keywords = ["AI", "LLM", "automated code repair", "esbmc"]
classifiers = [
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Programming Language :: Python :: 3",
]
dependencies = [
  "blessed",
  "langchain",
  "langchain-anthropic",
  "langchain-community",
  "langchain-ollama",
  "langchain-openai",
  "lizard",
  "structlog",
  "platformdirs",
  "python-dotenv",
  "regex",
  "torch",               # Needed by transformers
  "transformers",        # Needed by langchain-core to calculate get_token_ids
]
# https://hatch.pypa.io/latest/version/
dynamic = ["version"]

[project.urls]
Documentation = "https://github.com/esbmc/esbmc-ai/wiki"
Homepage = "https://github.com/esbmc/esbmc-ai"
Issues = "https://github.com/esbmc/esbmc-ai/issues"
"Source Code" = "https://github.com/esbmc/esbmc-ai"

[project.scripts]
esbmc-ai = "esbmc_ai.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "esbmc_ai/__about__.py"

[tool.hatch.envs.default]
description = "Default environment. Used for development."
dependencies = [
  "pylint",
  "ipykernel",
  "py",        # Dependency of pytest-regtest
  "twine",
  "pydeps",
]

[tool.hatch.envs.default.scripts]
podman-build = """
# Check if Podman is installed
if [ -z $(command -v podman) ]; then
  echo "Error: Podman not installed."
  exit 1
fi

echo "Building project artifacts..."
# Run hatch build to generate dist/ contents (including the wheel)
hatch build
# Check if build was successful
if [ $? -ne 0 ]; then
  echo "Error: Hatch build failed."
  exit 1
fi

echo "Finding wheel file in dist/..."
# Find the latest generated wheel file in the dist/ directory.
# We assume only one .whl file is relevant after a build.
# Use 'ls -t' to sort by modification time, newest first.
WHEEL_FILE=$(ls -t dist/*.whl 2>/dev/null | head -n 1)

# Check if a wheel file was found
if [ -z "$WHEEL_FILE" ]; then
  echo "Error: No wheel file found in dist/ after build."
  exit 1
fi

echo "Found wheel: $WHEEL_FILE"

echo "Building Podman image..."
# Build the Podman image, passing the wheel file path and extra pip packages as build arguments
podman build \\
  --tag esbmc-ai \\
  --build-arg ESBMCAI_WHEEL="$WHEEL_FILE" \\
  --build-arg EXTRA_PIP_PACKAGES="{args}" \\
  .
"""

docker-build = """
# Check if Docker is installed
if [ -z $(command -v docker) ]; then
  echo "Error: Docker not installed."
  exit 1
fi

echo "Building project artifacts..."
# Run hatch build to generate dist/ contents (including the wheel)
hatch build
# Check if build was successful
if [ $? -ne 0 ]; then
  echo "Error: Hatch build failed."
  exit 1
fi

echo "Finding wheel file in dist/..."
# Find the latest generated wheel file in the dist/ directory.
# We assume only one .whl file is relevant after a build.
# Use 'ls -t' to sort by modification time, newest first.
WHEEL_FILE=$(ls -t dist/*.whl 2>/dev/null | head -n 1)

# Check if a wheel file was found
if [ -z "$WHEEL_FILE" ]; then
  echo "Error: No wheel file found in dist/ after build."
  exit 1
fi

echo "Found wheel: $WHEEL_FILE"

echo "Building Docker image..."
# Build the Docker image, passing the wheel file path and extra pip packages as build arguments
docker build \\
  --tag esbmc-ai \\
  --build-arg ESBMCAI_WHEEL="$WHEEL_FILE" \\
  --build-arg EXTRA_PIP_PACKAGES="{args}" \\
  .
"""

find-cycles = "pydeps esbmc_ai --show-cycles --no-show -o esbmc_ai.svg"

[tool.hatch.envs.hatch-test]
description = "Used when running pytest. Using hatch test..."
extra-dependencies = [
  "pytest",
  "pytest-subtests",
  "pytest-cov",
  "pytest-regtest",
]

[tool.hatch.build.targets.sdist]
include = ["/esbmc_ai"]
# exclude = ["**/*"]
# packages = ["esbmc_ai"]

[tool.hatch.build.targets.wheel]
include = ["/esbmc_ai"]
# exclude = ["**/*"]
# packages = ["esbmc_ai"]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
